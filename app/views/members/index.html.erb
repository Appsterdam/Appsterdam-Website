<h1><%= @title = 'Members' %></h1>

<%= render 'members/select' %>

<%= render @members %>

<% if @members.has_next_page? %>
  <p id="more_listings"><%= link_to "Load more member listings", members_path(:page => @members.next_page) %></p>
<% end %>

<script>
(function(){
  function deactivate() {
    $("div.selection span.active").removeClass('active');
  }
  $("body").click(function() {
    deactivate();
  });
  $("body").keydown(function(event) {
    if (event.keyCode == 27) {
      deactivate();
    }
  });
  $("div.selection").delegate("span > a", "click", function(event) {
    event.stopPropagation()
    var clicked = $(this).parent();
    if (clicked.hasClass('active')) {
      clicked = $();
    }
    deactivate();
    clicked.addClass('active');
  });
})();

(function(){
  function load() {
    var url = $("#more_listings > a").attr("href");
    $("#more_listings").html("<span>Loadingâ€¦</span>");
    // TODO in this case we force the format param to 'js', but interpret as 'html'
    // This has to do with dealing with the controller to send the correct data,
    // but this is an ugly workaround, no?
    $.get(url, { format:"js" }, function(response) {
      $("#more_listings").replaceWith(response);
    }, "html");
  }
  $("#more_listings > a").live("click", function(event){
    load();
    return false;
  })
  $(window).scroll(function(event) {
    if ($(document).height() - $(window).height() - $(document.body).scrollTop() < 800) {
      if ($('#more_listings > a').size() != 0) {
        load();
      }
    }
  });
})();
</script>
